#Generate mock data
import "tfplan/v2" as tfplan
import "approved"

param valid_actions default [
	["no-op"],
	["create"],
	["update"],
]

summary = func(input) {
	result = false
	if input.violations is empty {
		return true
	} else {
		log(input)
	}
	return result
}

log = func(input) {
	header(input)
	violations(input)
	return null
}

header = func(input) {
	print(
		"\t========================================================================\n",
		"\t                    _       _       _ \n",
		"\t                   (_)     | |     | |\n",
		"\t                    _ _ __ | |_ ___| |\n",
		"\t                   | | '_ \\| __/ _ \\ |\n",
		"\t                   | | | | | ||  __/ |\n",
		"\t                   |_|_| |_|\\__\\___|_|\n",
		"\t\n",
		"\t========================================================================\n",
		"\tName        :" + "intel-azurerm-kubernetes-cluster-deny-unapproved-instance-types.sentinel\n",
		"\tCategory    :" + "Platform (PaaS)\n",
		"\tProvider    :" + "hashicorp/azurerm\n",
		"\tResource    :" + "azurerm_kubernetes_cluster\n",
		"\tParameter   :" + "vm_size\n",
		"\tCheck       :" + "vm_size contains\n",
		"\t\n",
		"\tFor a list of allowed instance types see:\n",
		"\thttps://github.com/intel/terraform-intel-azure-aks/blob/main/POLICIES.md\n",
	)
	return null
}

violations = func(input) {
	print(
		"\t========================================================================\n",
		"\tRESOURCE VIOLATIONS\n",
		"\tThe configured server type should use an Intel Xeon 3rd Generation Scalable processor (code-named Ice Lake)\n",
		"\t========================================================================\t",
	)
	for input.violations as violation {
		print(
			"\t",
			"name       :" + violation.name + "\n\t",
			"type       :" + violation.type + "\n\t",
			"address    :" + violation.address + "\n\t",
			"message    :" + violation.message + "\t\n",
			"\t------------------------------------------------------------------------\t",
		)
	}
	if (input.violations is not empty) {
		print(
			"\t",
			"Resources out of compliance: " + string(length(input.violations)) + "\n",
			"\t------------------------------------------------------------------------\t",
		)
	}
	return null
}

// Allowed server resource types
allowed_server_types = approved.azurek8

doc = {
	"id":       "kubernetes01",
	"resource": "azurerm_kubernetes_cluster",
	"name":     "Server Type must be one of the approved instances",
}

// Filter resources by type
all_resources = filter tfplan.resource_changes as _, rc {
	rc.type is doc.resource and
		rc.mode is "managed" and
		rc.change.actions in valid_actions
}

// Filter resources that violate a given condition
violators = filter all_resources as _, r {
	all r.change.after.default_node_pool as node_pools {
		node_pools.vm_size not in allowed_server_types
	}
}

// Build a summary report
summaryreport = {
	"id":   doc.id,
	"name": doc.name,
	"violations": map violators as _, violation {
		{
			"name":    violation.name,
			"address": violation.address,
			"type":    violation.type,
			"message": violation.name + " uses a node type that is not an allowed server type.",
		}
	},
}

main = rule {
	summary(summaryreport)
}
