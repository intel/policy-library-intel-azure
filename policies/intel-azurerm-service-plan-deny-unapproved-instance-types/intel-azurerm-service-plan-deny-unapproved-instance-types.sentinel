import "tfplan/v2" as tfplan

param valid_actions default [
	["no-op"],
	["create"],
	["update"],
]

format = {
	"reset": "\033[0m",
	"info":  "\033[32m",
	"warn":  "\033[33m",
	"error": "\033[31m",
}

summary = func(input, level) {
	result = false
	if input.violations is empty {
		return true
	} else {
		log(input, format[level])
	}
	return result
}

log = func(input, output) {
	header(input, output)
	violations(input, output)
	return null
}

header = func(input, output) {
	print(
		output + "\t========================================================================\n",
		output + "\t                    _       _       _ \n",
		output + "\t                   (_)     | |     | |\n",
		output + "\t                    _ _ __ | |_ ___| |\n",
		output + "\t                   | | '_ \\| __/ _ \\ |\n",
		output + "\t                   | | | | | ||  __/ |\n",
		output + "\t                   |_|_| |_|\\__\\___|_|\n",
		output + "\t\n",
		output + "\t========================================================================\n",
		output + "\tName        :" + output + " " + "intel-azurerm-service-plan-deny-unapproved-instance-types.sentinel\n",
		output + "\tCategory    :" + output + " " + "Infrastructure (IaaS)\n",
		output + "\tProvider    :" + output + " " + "hashicorp/azurerm\n",
		output + "\tResource    :" + output + " " + "azurerm_service_plan\n",
		output + "\tParameter   :" + output + " " + "sku_name\n",
		output + "\tCheck       :" + output + " " + "sku_name contains\n",
		output + "\t\n",
		output + "\t              P1v3, P2v3\n",
		output + "\t              P3v3, EP1\n",
		output + "\t              EP2, EP3\n",
	)
	return null
}

violations = func(input, output) {
	print(
		output + "\t========================================================================\n",
		output + "\tRESOURCE VIOLATIONS\n" + format.reset,
		output + "\tThe configured server type should use an Intel Xeon 3rd Generation Scalable processor (code-named Ice Lake)\n",
		output + "\t========================================================================\t",
	)
	for input.violations as violation {
		print(
			"\t",
			output + "name       :" + output + " " + violation.name + "\n\t",
			output + "type       :" + output + " " + violation.type + "\n\t",
			output + "address    :" + output + " " + violation.address + "\n\t",
			output + "message    :" + output + " " + violation.message + "\t\n",
			output + "\t------------------------------------------------------------------------\t",
		)
	}
	if (input.violations is not empty) {
		print(
			output + "\t",
			output + "Resources out of compliance: " + string(length(input.violations)) + "\n" + format.reset,
			output + "\t------------------------------------------------------------------------\t",
		)
	}
	return null
}

// Allowed server resource types
allowed_server_types = ["P1v3", "P2v3", "P3v3", "EP1", "EP2", "EP3"]

doc = {
	"id":       "appserviceplan01",
	"resource": "azurerm_service_plan",
	"name":     "Server Type must be one of the approved instances",
}

// Filter resources by type
all_resources = filter tfplan.resource_changes as _, rc {
	rc.type is doc.resource and
		rc.mode is "managed" and
		rc.change.actions in valid_actions
}

// Filter resources that violate a given condition
violators = filter all_resources as _, r {
	r.change.after.sku_name not in allowed_server_types
}

// Build a summary report
summaryreport = {
	"id":   doc.id,
	"name": doc.name,
	"violations": map violators as _, violation {
		{
			"name":    violation.name,
			"address": violation.address,
			"type":    violation.type,
			"message": violation.change.after.sku_name + " is not an allowed server type.",
		}
	},
}

main = rule {
	summary(summaryreport, "warn")
}
